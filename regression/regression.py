#!/usr/bin/python

import os

## Run this on the results file generated by the
## regressions script to create the new builds.html file
## This will actually only be the MAIN body of the builds.html
## because we are currently using static header and footers for
## the git pages rendering.

## To use:
##    $ ./regression.py results.txt
##    $ cat header.html results.html footer.html

## Regression Results Array
## Each element in the array is a sub-array
## for each of the different OSes.
results = {}
os_list = []

####################################################################
## Function: PARSE_RESULTS
## Purpose:  Walk through the results file and populate the 
##           results dictionary with results for each OS
####################################################################
def parse_results(filename):
    ## Open Results File
    fd = open(filename, 'r')
    ## AGS: TODO - Error checking for File

    ## Walk each line and parse results file to build results array
    ## AGS: TODO - Add error checking to make sure formatting is OK
    for line in fd:
        ## Get OS Name
        os_name = line.strip()
        if (os_name == "##END_OF_RESULTS##"):
            break
        os_list.append(os_name)
        print os_name
        ## Get Test Results
        os_results = parse_test_results(fd)
        results[os_name] = os_results
    ## Close Results File
    fd.close()

####################################################################
## Function: PARSE_TEST_RESULTS
## Purpose:  Iterate through each OS's test result and assemble
##           an array that will be added to the results dictionary
####################################################################
def parse_test_results(fd):
    os_results = []
    count = 0
    ## Walk each line and get results    
    for line in fd:
        test_results = line.strip().split(";")
        os_results.append(test_results)
        ## Stop after 12 (hard coded for now)
        if (count >= 11):
            break
        else:
            count += 1
    ## Return OS Results
    return os_results

####################################################################
## Function: GENERATE_HTML
## Purpose:  Use the results dictionary to generate the results HTML
####################################################################
def generate_html(filename):
    ## AGS: TODO - Check if File exists (should we overwrite?)
    fd = open(filename,'w')
    ## AGS: TODO - Error checking if the file could not be opened
    
    ## Static HTML to start the Table
    fd.write("          <section id=\"build_content\" class=\"inner\">\n")
    fd.write("          <table border=\"2\">\n")
    fd.write("            <thead>\n")
    fd.write("              <tr style=\"height:16.0pt\" height=\"16\">\n")
    fd.write("                <td style=\"background-color: #cccccc; text-align: center;\">\n")
    fd.write("                  <strong>Operating System</strong><br>\n")
    fd.write("                </td>\n")
    fd.write("                <td style=\"background-color: #cccccc; text-align: center;\">\n")
    fd.write("                  <strong>GCC Version</strong>\n")
    fd.write("                </td>\n")
    fd.write("                <td style=\"background-color: #cccccc; text-align: center;\">\n")
    fd.write("                  <strong>Boost Version</strong>\n")
    fd.write("                </td>\n")
    fd.write("                <td style=\"background-color: #cccccc; text-align: center;\">\n")
    fd.write("                  <strong>Test Status</strong>\n")
    fd.write("                </td>\n")
    fd.write("                <td style=\"background-color: #cccccc; text-align: center;width:200pt\">\n")
    fd.write("                  <strong>Information</strong>\n")
    fd.write("                </td>\n")
    fd.write("              </tr>\n")
    fd.write("            </thead>\n")
    fd.write("            <tbody>\n")
    ## For Each OS in the results table populate the HTML Table
    for os in os_list:
        ## AGS: TODO - Verify it is in the Dictionary
        os_results = results[os]
        count = 0
        ## Add OS Name and Span 12 Rows
        fd.write("             <tr> <!-- " + os + " -->\n")
        fd.write("                <td rowspan=\"12\" style=\"text-align:center\">\n")
        fd.write("                  <strong>" + os + "</strong>\n")
        fd.write("                </td>\n")
        ## For each result write test results out
        for test_results in os_results:
            if (count > 0):
                ## Skip writing TR tag for 1st entry since OS spans 12 rows
                fd.write("             <tr>\n")
            ## Increment Counter
            count += 1
            write_test_results(test_results,fd)
            ## Write TR Close tag
            fd.write("             </tr>\n")        

    ## Close to Table Body
    fd.write("            </tbody>\n")    
    fd.write("          </table>\n")
    ## Close HTML File
    fd.close()

## Function: WRITE_TEST_RESULTS
## Purpose:  Write the test results to the HTML file
def write_test_results(test_results,fd):
    gcc_ver = test_results[0]
    boost_ver = test_results[1]
    status = test_results[2]
    info = test_results[3]
    (test_status,test_status_color) = parse_test_status(status)
    ## Write Comment Tag
    fd.write("                <!-- GCC " + gcc_ver + " Boost " + boost_ver + " -->\n");
    ## Write GCC Version
    fd.write("                <td style=\"text-align: center;\"> " + gcc_ver + "</td>\n");
    ## Write Boost Version
    fd.write("                <td style=\"text-align: center;\"> " + boost_ver + "</td>\n");
    ## Write Test Status (Parse for Color)
    fd.write("                <td style=\"text-align: center; background-color: " + test_status_color + ";\">\n");
    fd.write("                  <strong>" + test_status + "</strong>\n");
    fd.write("                </td>\n");
    ## Write Information (If Any)
    fd.write("                <td style=\"width:200pt\">" + info + "</td>\n");

## Function: PARSE_TEST_STATUS
## Purpose:  Parse the status of the test for color coding cell
def parse_test_status(status):
    test_status = status.upper().strip()
    ## PASSED: Green (#33CC00)
    ## ERROR-<NUM>
    ##       1 = Red: Torc Run Failed (#FF0000)
    ##       2 = Blue: Torc Build Error (#3366FF)
    ##       3 = Light Green: Boost Build Error (#CCFFFF)
    ##       4 = Light Tan: GCC Build Error (#FFCC66)
    ## TBD: Yellow (#FFFF00)
    if (test_status == "PASSED"):
        return ("PASSED","#33CC00")
    elif (test_status == "ERROR-1"):
        return ("ERROR","#FF0000")
    elif (test_status == "ERROR-2"):
        return ("ERROR","#3366ff")
    elif (test_status == "ERROR-3"):
        return ("ERROR","#CCFFFF")
    elif (test_status == "ERROR-3"):
        return ("ERROR","#FFCC66")
    elif (test_status == "TBD"):
        return ("TBD", "#FFFF00")
    else:
        ## Invalid Test Status
        print "ERROR Invalid Test Status: " + status
        exit()

    

## AGS: TODO - Change from hardcoded to commandline
parse_results("../regression/results.txt")
generate_html("../regression/results.html")

## Just catting the files together
os.system("cat head.html results.html foot.html > builds.html")
